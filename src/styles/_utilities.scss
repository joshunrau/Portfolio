@use "sass:map";
@use "sass:math";

$utilities: (
  (
    prefix: d,
    property: display,
    values: inline inline-block block grid table table-row table-cell flex inline-flex none
  ),
  (
    prefix: text-align,
    property: text-align,
    values: left right center
  ),
  (
    prefix: flex,
    property: flex-direction,
    values: row column row-reverse column-reverse
  ),
  (
    prefix: flex-grow,
    property: flex-grow,
    values: 0 1
  ),
  (
    prefix: flex-shrink,
    property: flex-shrink,
    values: 0 1
  ),
  (
    prefix: flex,
    property: flex-wrap,
    values: wrap nowrap wrap-reverse
  ),
  (
    prefix: justify-content,
    property: justify-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly,
    )
  ),
  (
    prefix: align-items,
    property: align-items,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch,
    )
  ),
);

@each $utility in $utilities {
  $prefix: map.get($utility, prefix);
  $property: map.get($utility, property);
  $values: map.get($utility, values);

  @if type-of($values) == list {
    @each $value in $values {
      .#{$prefix}-#{$value} {
        #{$property}: $value;
      }
    }
  } @else if type-of($values) == map {
    @each $key, $value in $values {
      .#{$prefix}-#{$key} {
        #{$property}: $value;
      }
    }
  }
}

@for $i from 1 through 5 {
  .p-#{$i} {
    padding: $base-spacing * $i;
  }
  .m-#{$i} {
    margin: $base-spacing * $i;
  }
}

@each $value in (0, 25, 50, 75, 100) {
  .h-#{$value} {
    height: math.percentage($number: calc($value / 100));
  }

  .w-#{$value} {
    width: math.percentage($number: calc($value / 100));
  }
}

.container {
  height: 100%;
  margin: auto;
  max-width: map.get($map: $breakpoints, $key: "xl");
  width: 100%;
}
